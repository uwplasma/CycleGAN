
from desc.compat import rescale
from desc.objectives import (AspectRatio, ForceBalance, QuasisymmetryTripleProduct,
                            QuasisymmetryBoozer, QuasisymmetryTwoTerm, BallooningStability,
                            BScaleLength, EffectiveRipple, Elongation,
                            GammaC, Isodynamicity, MagneticWell,
                            MeanCurvature, MercierStability, MirrorRatio,
                            Omnigenity, Pressure, RotationalTransform,
                            Shear, ToroidalCurrent, Volume)

eq = load(eq_path)
# eq = rescale(eq, L=("a", 1.7), B=("B0", 5.7))
eq = rescale(eq, B=("B0", 5.7))

# obj = BallooningStability(eq=eq, normalize=False);obj.build(verbose=0);ballooning_stability=obj.compute(*obj.xs(eq))
# print(f"Ballooning Stability: {ballooning_stability}")
obj = AspectRatio(eq=eq);obj.build(verbose=0);aspect_ratio=obj.compute(*obj.xs(eq))
print(f"Aspect Ratio: {aspect_ratio}")
obj = ForceBalance(eq=eq);obj.build(verbose=0);force_balance=obj.compute_scalar(*obj.xs(eq))
print(f"Force Balance: {force_balance}")
obj = QuasisymmetryTripleProduct(eq=eq);obj.build(verbose=0);qs_tp=obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Triple Product: {qs_tp}")
helicity_QH=(1, eq.NFP)
helicity_QA=(1, 0)
helicity_QP=(0, 1)
obj = QuasisymmetryBoozer( eq=eq, helicity=helicity_QH);obj.build(verbose=0);qs_boozer_QH =obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Boozer QH: {qs_boozer_QH}")
obj = QuasisymmetryBoozer( eq=eq, helicity=helicity_QA);obj.build(verbose=0);qs_boozer_QA =obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Boozer QA: {qs_boozer_QA}")
obj = QuasisymmetryBoozer( eq=eq, helicity=helicity_QP);obj.build(verbose=0);qs_boozer_QP =obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Boozer QP: {qs_boozer_QP}")
obj = QuasisymmetryTwoTerm(eq=eq, helicity=helicity_QH);obj.build(verbose=0);qs_twoterm_QH=obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Two Term QH: {qs_twoterm_QH}")
obj = QuasisymmetryTwoTerm(eq=eq, helicity=helicity_QA);obj.build(verbose=0);qs_twoterm_QA=obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Two Term QA: {qs_twoterm_QA}")
obj = QuasisymmetryTwoTerm(eq=eq, helicity=helicity_QP);obj.build(verbose=0);qs_twoterm_QP=obj.compute_scalar(*obj.xs(eq))
print(f"Quasisymmetry Two Term QP: {qs_twoterm_QP}")
obj = BScaleLength(eq=eq, normalize=False);obj.build(verbose=0);b_scale_length=obj.compute_scalar(*obj.xs(eq))
print(f"B Scale Length: {b_scale_length}")
obj = EffectiveRipple(eq=eq);obj.build(verbose=0);effective_ripple=obj.compute_scalar(*obj.xs(eq))
print(f"Effective Ripple: {effective_ripple}")
obj = Elongation(eq=eq);obj.build(verbose=0);elongation=obj.compute_scalar(*obj.xs(eq))
print(f"Elongation: {elongation}")
obj = GammaC(eq=eq);obj.build(verbose=0);gamma_c=obj.compute_scalar(*obj.xs(eq))
print(f"Gamma C: {gamma_c}")
obj = Isodynamicity(eq=eq);obj.build(verbose=0);isodynamicity=obj.compute_scalar(*obj.xs(eq))
print(f"Isodynamicity: {isodynamicity}")
obj = MagneticWell(eq=eq);obj.build(verbose=0);magnetic_well=obj.compute_scalar(*obj.xs(eq))
print(f"Magnetic Well: {magnetic_well}")
obj = MeanCurvature(eq=eq);obj.build(verbose=0);mean_curvature=obj.compute_scalar(*obj.xs(eq))
print(f"Mean Curvature: {mean_curvature}")
obj = MercierStability(eq=eq);obj.build(verbose=0);mercier_stability=obj.compute_scalar(*obj.xs(eq))
print(f"Mercier Stability: {mercier_stability}")
obj = MirrorRatio(eq=eq);obj.build(verbose=0);mirror_ratio=obj.compute_scalar(*obj.xs(eq))
print(f"Mirror Ratio: {mirror_ratio}")
# obj = Omnigenity(eq=eq);obj.build(verbose=0);omnigenity=obj.compute_scalar(*obj.xs(eq))
# print(f"Omnigenity: {omnigenity}")
obj = Pressure(eq=eq);obj.build(verbose=0);pressure=obj.compute_scalar(*obj.xs(eq))
print(f"Pressure: {pressure}")
obj = RotationalTransform(eq=eq);obj.build(verbose=0);rotational_transform=obj.compute_scalar(*obj.xs(eq))
print(f"Rotational Transform: {rotational_transform}")
obj = Shear(eq=eq);obj.build(verbose=0);shear=obj.compute_scalar(*obj.xs(eq))
print(f"Shear: {shear}")
obj = ToroidalCurrent(eq=eq);obj.build(verbose=0);toroidal_current=obj.compute_scalar(*obj.xs(eq))
print(f"Toroidal Current: {toroidal_current}")
obj = Volume(eq=eq);obj.build(verbose=0);volume=obj.compute_scalar(*obj.xs(eq))
print(f"Volume: {volume}")
exit()